# CI/CD Pipeline for Claude Memory MCP System
# Builds, tests, and deploys the memory system with comprehensive validation

name: Memory MCP CI/CD

on:
  push:
    branches: [ main, develop, 'release/*' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/memory-mcp
  PYTHON_VERSION: '3.11'

jobs:
  # Code Quality and Testing
  test:
    name: Test and Quality Check
    runs-on: ubuntu-latest
    
    services:
      qdrant:
        image: qdrant/qdrant:v1.7.4
        ports:
          - 6333:6333
          - 6334:6334
        options: >-
          --health-cmd "curl -f http://localhost:6333/health"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-qdrant.txt
        pip install pytest pytest-cov pytest-asyncio black isort mypy flake8
    
    - name: Code formatting check
      run: |
        black --check memory_mcp/
        isort --check-only memory_mcp/
    
    - name: Linting
      run: |
        flake8 memory_mcp/ --max-line-length=100 --ignore=E203,W503
    
    - name: Type checking
      run: |
        mypy memory_mcp/ --ignore-missing-imports
    
    - name: Unit tests
      run: |
        pytest tests/ -v --cov=memory_mcp --cov-report=xml --cov-report=html
      env:
        QDRANT_URL: http://localhost:6333
    
    - name: Integration tests
      run: |
        python validate_phase2.py
        python -c "
        import asyncio
        from memory_mcp.domains.manager import MemoryDomainManager
        from memory_mcp.utils.config import load_config
        
        async def test():
            config = load_config('config_migration_enabled.json')
            manager = MemoryDomainManager(config)
            await manager.initialize()
            
            # Test basic functionality
            memory_id = await manager.store_memory('fact', {'statement': 'CI/CD Test'}, 0.8)
            results = await manager.retrieve_memories('CI/CD Test', limit=1)
            assert len(results) > 0
            print('Integration test passed')
            await manager.shutdown()
        
        asyncio.run(test())
        "
      env:
        QDRANT_URL: http://localhost:6333
    
    - name: Phase 2 Component Tests
      run: |
        python test_phase2_dual_collection.py
      env:
        QDRANT_URL: http://localhost:6333
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Security audit with safety
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
    
    - name: Dependency check
      run: |
        pip install pip-audit
        pip-audit --format=json --output=pip-audit-report.json || true

  # Build Container Images
  build:
    name: Build and Push Container Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.memory-mcp
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Set up Kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-west-2 --name memory-mcp-dev
    
    - name: Deploy with Helm
      run: |
        helm upgrade --install memory-mcp-dev ./helm/memory-mcp \
          --namespace memory-mcp-dev \
          --create-namespace \
          --values ./helm/memory-mcp/values.yaml \
          --set memoryMcp.image.tag=${{ github.sha }} \
          --set global.environment=development \
          --wait \
          --timeout=10m
    
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/memory-mcp -n memory-mcp-dev --timeout=300s
        kubectl get pods -n memory-mcp-dev
    
    - name: Run smoke tests
      run: |
        kubectl run smoke-test --image=curlimages/curl:latest --rm -i --restart=Never \
          -- curl -f http://memory-mcp-service.memory-mcp-dev.svc.cluster.local/health

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Set up Kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-west-2 --name memory-mcp-staging
    
    - name: Deploy with Helm
      run: |
        helm upgrade --install memory-mcp-staging ./helm/memory-mcp \
          --namespace memory-mcp-staging \
          --create-namespace \
          --values ./helm/memory-mcp/values.yaml \
          --set memoryMcp.image.tag=${{ github.sha }} \
          --set global.environment=staging \
          --wait \
          --timeout=15m
    
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/memory-mcp -n memory-mcp-staging --timeout=300s
        kubectl get pods -n memory-mcp-staging
    
    - name: Run integration tests
      run: |
        # Run comprehensive integration tests against staging
        kubectl apply -f - <<EOF
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: integration-test-${{ github.run_number }}
          namespace: memory-mcp-staging
        spec:
          template:
            spec:
              containers:
              - name: test
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
                command: ["python", "demo_phase2_migration.py"]
                env:
                - name: QDRANT_URL
                  value: "http://qdrant-service:6333"
              restartPolicy: Never
          backoffLimit: 2
        EOF
        
        kubectl wait --for=condition=complete job/integration-test-${{ github.run_number }} \
          -n memory-mcp-staging --timeout=600s

  # Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Set up Kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-west-2 --name memory-mcp-prod
    
    - name: Deploy with Helm (Blue-Green)
      run: |
        # Get current release
        CURRENT_COLOR=$(helm get values memory-mcp-prod -n memory-mcp-prod | grep color | cut -d: -f2 | tr -d ' ')
        NEW_COLOR=$([ "$CURRENT_COLOR" = "blue" ] && echo "green" || echo "blue")
        
        echo "Deploying to $NEW_COLOR environment"
        
        helm upgrade --install memory-mcp-prod-$NEW_COLOR ./helm/memory-mcp \
          --namespace memory-mcp-prod \
          --create-namespace \
          --values ./helm/memory-mcp/values.yaml \
          --set memoryMcp.image.tag=${{ github.sha }} \
          --set global.environment=production \
          --set global.deploymentColor=$NEW_COLOR \
          --wait \
          --timeout=20m
    
    - name: Verify production deployment
      run: |
        kubectl rollout status deployment/memory-mcp -n memory-mcp-prod --timeout=600s
        kubectl get pods -n memory-mcp-prod
    
    - name: Production smoke tests
      run: |
        # Run production smoke tests
        kubectl run prod-smoke-test --image=curlimages/curl:latest --rm -i --restart=Never \
          -- curl -f http://memory-mcp-service.memory-mcp-prod.svc.cluster.local/health
    
    - name: Switch traffic (Blue-Green)
      run: |
        # Update ingress to point to new deployment
        # This would be environment-specific
        echo "Traffic switched to new deployment"

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: always()
    
    steps:
    - name: Clean up old container images
      run: |
        # Keep last 10 images, clean up the rest
        echo "Cleaning up old container images..."
        # Implementation would use GitHub API or registry API