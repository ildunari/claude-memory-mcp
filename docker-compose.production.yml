# Docker Compose for Production Claude Memory MCP System
# Includes: Memory MCP Server, Qdrant Vector DB, Monitoring, Load Balancing

version: '3.8'

services:
  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: memory-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
      - ./config/qdrant_config.yaml:/qdrant/config/production.yaml
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - memory-net

  # Memory MCP Server - Primary Instance
  memory-mcp-1:
    build:
      context: .
      dockerfile: Dockerfile.memory-mcp
    container_name: memory-mcp-primary
    restart: unless-stopped
    ports:
      - "8001:8000"
    volumes:
      - ./config/config.production.json:/app/config/config.json:ro
      - memory_data:/app/data
      - memory_logs:/app/logs
    environment:
      - MEMORY_MCP_CONFIG=/app/config/config.json
      - MEMORY_MCP_LOG_LEVEL=INFO
      - MEMORY_MCP_INSTANCE_ID=primary
      - QDRANT_URL=http://qdrant:6333
    depends_on:
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - memory-net

  # Memory MCP Server - Secondary Instance (for load balancing)
  memory-mcp-2:
    build:
      context: .
      dockerfile: Dockerfile.memory-mcp
    container_name: memory-mcp-secondary
    restart: unless-stopped
    ports:
      - "8002:8000"
    volumes:
      - ./config/config.production.json:/app/config/config.json:ro
      - memory_data:/app/data
      - memory_logs:/app/logs
    environment:
      - MEMORY_MCP_CONFIG=/app/config/config.json
      - MEMORY_MCP_LOG_LEVEL=INFO
      - MEMORY_MCP_INSTANCE_ID=secondary
      - QDRANT_URL=http://qdrant:6333
    depends_on:
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - memory-net

  # NGINX Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: memory-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - memory-mcp-1
      - memory-mcp-2
    networks:
      - memory-net

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: memory-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - memory-net

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.2.0
    container_name: memory-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    networks:
      - memory-net

  # Log aggregation with Loki
  loki:
    image: grafana/loki:2.9.0
    container_name: memory-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./config/loki-config.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - memory-net

  # Log shipping with Promtail
  promtail:
    image: grafana/promtail:2.9.0
    container_name: memory-promtail
    restart: unless-stopped
    volumes:
      - ./config/promtail-config.yml:/etc/promtail/config.yml:ro
      - memory_logs:/var/log/memory-mcp:ro
      - nginx_logs:/var/log/nginx:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - memory-net

  # Redis for caching and session management
  redis:
    image: redis:7.2-alpine
    container_name: memory-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - memory-net

volumes:
  qdrant_data:
    driver: local
  memory_data:
    driver: local
  memory_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  redis_data:
    driver: local

networks:
  memory-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Environment variables that should be set:
# GRAFANA_ADMIN_PASSWORD - Grafana admin password
# MEMORY_MCP_SECRET_KEY - Secret key for the MCP server
# SSL_CERT_PATH - Path to SSL certificate
# SSL_KEY_PATH - Path to SSL private key